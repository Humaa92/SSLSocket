import java.net.*;
import java.io.*;
import java util.*;
import java security.*;
import javax.net.ssl.*;
import javax.net.*;
import com.sun.net.ssl.*;

public class SecureOrderTaker {

public final static int DEFAULT_PORT = 7000;
public final static String algorithm = "SSLv3";

public static void main{String[] args) {

int port = DEFAULT_PORT;
if (args.length > 0) {
try {
port = Integar.parseInt(args[0]);
if (port <= 0 || port >= 65536) {
System.out.println("Port must be between 1 and 65535");
return; 
}
}
catch (NumberFormatException e) {}
}
try {

SSLContext context = SSLContext.getInstance("SSL"); 
KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509);
KeyStore ks = KeyStore.getInstance("JKS");

char[] password = "2andnotafnord".toCharArray();
ks.load(new FileInputStream("jnp2e19.keys"), password);
kmf.init(ks,password);

context.init(kmf.getKeyManagers(), null, null);
SSLServerSocketFactory factory = context.getServerSocketFactory();

SSLServerSocket server = (SSLServerSocket) factory.createServerSocket(port);
try {
while (true) {
Socket theConnection = server.accept();
InputStream in = theConnection.getInputStream();
int c;
while ((c = in.read()) != -1) {
System.out.write(c);
}
theConnection.close();
}
}
catch (IOException e) {
System.err.println(e);
}
}
catch(IOException e)
{
e.printStackTrace();
}
catch (KeyManagement Exception e) {
e.printStackTrace();
}
catch (NoSuchAlgorithmException e) {
e.printStackTrace();
}
catch (java.security.cert.CertificationException e) {
e.printStackTrace();
}
catch (UnrecoverableKeyException e) {
e.printStackTrace();
} 
}
} 























